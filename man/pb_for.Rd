% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pb_for.R, R/pb_repeat.R, R/pb_while.R
\name{pb_for}
\alias{pb_for}
\alias{pb_repeat}
\alias{pb_while}
\title{Use a progress bar with regular for loops}
\usage{
pb_for(
  format = "[:bar] :percent",
  width = options("width")[[1]] - 2,
  complete = "=",
  incomplete = "-",
  current = ">",
  callback = invisible,
  clear = TRUE,
  show_after = 0.2,
  force = FALSE,
  message = NULL,
  tokens = alist()
)

pb_repeat(
  total,
  format = "[:bar] :percent",
  width = options("width")[[1]] - 2,
  complete = "=",
  incomplete = "-",
  current = ">",
  callback = invisible,
  clear = TRUE,
  show_after = 0.2,
  force = FALSE,
  message = NULL,
  tokens = alist()
)

pb_while(
  total,
  format = "[:bar] :percent",
  width = options("width")[[1]] - 2,
  complete = "=",
  incomplete = "-",
  current = ">",
  callback = invisible,
  clear = TRUE,
  show_after = 0.2,
  force = FALSE,
  message = NULL,
  tokens = alist()
)
}
\arguments{
\item{format}{The format of the progress bar.}

\item{width}{Width of the progress bar.}

\item{complete}{Completion character.}

\item{incomplete}{Incomplete character.}

\item{current}{Current character.}

\item{callback}{Callback function to call when the progress bar finishes.
The progress bar object itself is passed to it as the single parameter.}

\item{clear}{Whether to clear the progress bar on completion.}

\item{show_after}{Amount of time in seconds, after which the progress bar is
shown on the screen. For very short processes, it is probably not worth
showing it at all.}

\item{force}{Whether to force showing the progress bar, even if the given (or default) stream does not seem to support it.}

\item{message}{A message to display on top of the bar}

\item{tokens}{A list of unevaluated expressions, using \code{alist}, to be passed
passed to the \code{tick} method of the progress bar}

\item{total}{for \code{pb_while()} and \code{pb_repeat()}, an estimation of the
number of iteration.}
}
\description{
These functions wrap the progress bar utilities of the \emph{progress} package
to be able to use progress bar with regular \code{for}, \code{while} and \code{repeat} loops conveniently.
They forward all their
parameters to \code{progress::progress_bar$new()}. \code{pb_while()} and \code{pb_repeat()}
require the \code{total} argument.
}
\examples{
pb_for()
for (i in 1:10) {
  # DO SOMETHING
  Sys.sleep(0.5)
}

pb_for(format = "Working hard: [:bar] :percent :elapsed",
       callback = function(x) message("Were'd done!"))
for (i in 1:10) {
  # DO SOMETHING
  Sys.sleep(0.5)
}
}
