% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/surround_once.R
\name{surround_once}
\alias{surround_once}
\alias{with_once}
\title{Surround a function call once}
\usage{
surround_once(f, surround_fun, ...)

with_once(f, ..., with_fun = with)
}
\arguments{
\item{f}{a function}

\item{surround_fun}{a surrounding function used by surround_once}

\item{...}{additional parameters passed to surround_fun}

\item{with_fun}{a surrounding function used by with_once}
}
\description{
Some functions, such as \code{suppressWarnings()},  take an expression as their main
input. \code{surround_once()}
proposes a way to modify a function for one call so it behaves as if it were
surrounded by this surrounding function. \code{with()} also takes an expression, but
in second position, which makes it a bit awkward to use with \code{surround_once()},
\code{with_once()} solves this issue and can be used with all functions sharing
the syntax (e.g. the \verb{with_*} functions of the withr package).
}
\examples{
add <- function(x, y) {
 warning("we will perform an addition!")
 x + y
}

surround_once(add, suppressWarnings)
add(1,2)
add(1,2)

Sepal.Length <- 1:3
with_once(head, iris)
head(Sepal.Length, 2)
head(Sepal.Length, 2)

# we can get `with_once()`'s behavior with `surround_once()` but
# we must name the data argument as it comes first in `with()`
surround_once(head, with, data = iris)
head(Sepal.Length, 2)
head(Sepal.Length, 2)

\dontrun{
#' with_once(print,list(digits = 3),  with_fun = withr::with_options)
print(pi)
print(pi)
}
}
