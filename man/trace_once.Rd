% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/trace_once.R
\name{trace_once}
\alias{trace_once}
\title{Trace a function once}
\usage{
trace_once(
  what,
  ...,
  tracer,
  exit,
  at,
  print = FALSE,
  signature,
  where = topenv(parent.frame()),
  edit = FALSE
)
}
\arguments{
\item{what}{the name, possibly \code{\link[base]{quote}()}d, of a function
    to be traced or untraced.  For \code{untrace} or for \code{trace}
    with more than one argument, more than one name can be given in the
    quoted form, and the same action will be applied to each one.  For
    \dQuote{hidden} functions such as S3 methods in a namespace,
    \code{where = *} typically needs to be specified as well.}

\item{...}{unquoted expressions, if used rather than the \code{tracer} argument,
will be quoted and turned into the \code{tracer} argument fed to \code{trace()}}

\item{tracer}{either a \link[base]{function} or an unevaluated expression.  The
    function will be called or the expression will be evaluated either
    at the beginning of the call, or before those steps in the call
    specified by the argument \code{at}.
    See the details section.}

\item{exit}{either a \code{\link[base]{function}} or an unevaluated expression.  The
    function will be called or the expression will be evaluated on
    exiting the function.
    See the details section.}

\item{at}{optional numeric vector or list.  If supplied, \code{tracer}
    will be called just before the corresponding step in the body of the
    function.
    See the details section. }

\item{print}{If \code{TRUE} (as per default), a descriptive line is
    printed before any trace expression is evaluated.}

\item{signature}{ If this argument is supplied, it should be a
    signature for a method for function \code{what}.  In this case, the
    method, and \emph{not} the function itself, is traced.}

\item{where}{where to look for the function to be
    traced; by default, the top-level environment of the call to
    \code{trace}.

    An important use of this argument is to trace functions from a
    package which are \dQuote{hidden} or called from another package.
    The namespace mechanism imports the functions to be called (with the
    exception of functions in the base package).  The functions being
    called are \emph{not} the same objects seen from the top-level (in
    general, the imported packages may not even be attached).
    Therefore, you must ensure that the correct versions are being
    traced.  The way to do this is to set argument \code{where} to a
    function in the namespace (or that namespace).  The tracing
    computations will then start looking in the environment of that
    function (which will be the namespace of the corresponding package).
    (Yes, it's subtle, but the semantics here are central to how
    namespaces work in \R.)
  }

\item{edit}{ For complicated tracing, such as tracing within a loop
    inside the function, you will need to insert the desired calls by
    editing the body of the function.  If so, supply the \code{edit}
    argument either as \code{TRUE}, or as the name of the editor you
    want to use.  Then \code{trace()} will call \code{\link{edit}} and
    use the version of the function after you edit it.  See the details
    section for additional information.
    }
}
\description{
Works like trace but the function will return to normal after a single run.
It has a couple more differences : \code{print} is \code{FALSE} by default, and it
gains a \code{...} argument which is an often more convenient alternative to
the \code{tracer} argument.
}
\examples{
add <- function(x, y) x + y
trace_once(add, print("entering 'add'"))
add(1,3)

# after a calls the behavior returns to normal
add(1,3)
}
